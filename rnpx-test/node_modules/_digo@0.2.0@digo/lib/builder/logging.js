"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log_1 = require("../utility/log");
const path_1 = require("../utility/path");
const events_1 = require("./events");
/**
 * 表示日志等级。
 */
var LogLevel;
(function (LogLevel) {
    /**
     * 详细信息。
     */
    LogLevel[LogLevel["verbose"] = 0] = "verbose";
    /**
     * 普通日志。
     */
    LogLevel[LogLevel["log"] = 1] = "log";
    /**
     * 信息。
     */
    LogLevel[LogLevel["info"] = 2] = "info";
    /**
     * 警告。
     */
    LogLevel[LogLevel["warning"] = 3] = "warning";
    /**
     * 错误。
     */
    LogLevel[LogLevel["error"] = 4] = "error";
    /**
     * 致命错误。
     */
    LogLevel[LogLevel["fatal"] = 5] = "fatal";
    /**
     * 无日志。
     */
    LogLevel[LogLevel["slient"] = 6] = "slient";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/**
 * 允许输出的最低日志等级。
 */
exports.logLevel = 1 /* log */;
/**
 * 允许输出的最大日志长度。0 表示不限制。
 */
exports.logMaxLength = (process.stdout.columns || 80) * 5;
/**
 * 在控制台显示源内容的格式。如果设为 null 则不显示源内容。
 */
exports.logSource = {
    /**
     * 最大显示的宽度。如果小于等于 0 则表示和控制台实际宽度的差。
     */
    width: 0,
    /**
     * 最大显示的高度。
     */
    height: 3,
    /**
     * 是否高亮行。
     */
    showLine: true,
    /**
     * 是否高亮列。
     */
    showColumn: true
};
/**
 * 是否在控制台显示带颜色的文本。
 */
exports.colors = process.stdout.isTTY === true && !process.env["NODE_DISABLE_COLORS"];
/**
 * 记录日志时的回调函数。
 * @param log 要记录的日志项。
 * @param level 要记录的日志等级。
 * @return 如果函数返回 false，则不在控制台输出当前日志。
 */
exports.onLog = (log, level) => !events_1.emit("log", log, level);
/**
 * 获取累积的警告数。
 */
exports.warningCount = 0;
/**
 * 获取累积的错误数。
 */
exports.errorCount = 0;
/**
 * 记录一条日志。
 * @param data 要记录的日志。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 * @param level 要记录的日志等级。
 */
function log(data, args, level = 1 /* log */) {
    // 验证等级。
    switch (level) {
        case 4 /* error */:
        case 5 /* fatal */:
            exports.errorCount++;
            break;
        case 3 /* warning */:
            exports.warningCount++;
            break;
    }
    if (level < exports.logLevel) {
        return;
    }
    // 统一日志数据格式。
    if (!(data instanceof LogEntry)) {
        data = new LogEntry(data, args);
    }
    // 自定义打印日志。
    if (exports.onLog && exports.onLog(data, level) === false) {
        return;
    }
    // 打印日志。
    const message = data.toString(exports.colors);
    switch (level) {
        case 4 /* error */:
            var prefix = `error ${exports.errorCount}: `;
            if (exports.colors) {
                prefix = log_1.addLogColor(prefix, 91 /* brightRed */);
            }
            return console.error(prefix + message);
        case 5 /* fatal */:
            var prefix = `fatal error: `;
            if (exports.colors) {
                prefix = log_1.addLogColor(prefix, 91 /* brightRed */);
            }
            return console.error(prefix + message);
        case 3 /* warning */:
            var prefix = `warning ${exports.warningCount}: `;
            if (exports.colors) {
                prefix = log_1.addLogColor(prefix, 93 /* brightYellow */);
            }
            return console.warn(prefix + message);
        case 2 /* info */:
            return console.info(message);
        default:
            // tslint:disable-next-line:no-console
            return console.log(message);
    }
}
exports.log = log;
/**
 * 记录一条信息日志。
 * @param data 要记录的日志数据。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 */
function info(data, args) {
    log(data, args, 2 /* info */);
}
exports.info = info;
/**
 * 记录一条警告日志。
 * @param data 要记录的日志数据。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 */
function warning(data, args) {
    log(data, args, 3 /* warning */);
}
exports.warning = warning;
/**
 * 记录一条错误日志。
 * @param data 要记录的日志数据。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 */
function error(data, args) {
    log(data, args, 4 /* error */);
}
exports.error = error;
/**
 * 记录一条致命错误日志。
 * @param data 要记录的日志数据。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 */
function fatal(data, args) {
    log(data, args, 5 /* fatal */);
    process.exit(-1);
}
exports.fatal = fatal;
/**
 * 记录一条详细日志。
 * @param data 要记录的日志数据。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 */
function verbose(data, args) {
    return log(data, args, 0 /* verbose */);
}
exports.verbose = verbose;
/**
 * 所有消息的本地化版本。
 */
exports.dict = { __proto__: null };
/**
 * 格式化指定的日志信息。
 * @param message 要处理的日志信息。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 * @return 返回已格式化的消息。
 * @example format("abc{a}{b}", { a: 1, b: 2 }) // "abc1"
 * @example format("abc{0}{1}", [1, 2]) // "abc12"
 */
function format(message, args) {
    message = exports.dict[message] || message;
    if (args != undefined) {
        message = log_1.formatLog(message, args);
    }
    return message;
}
exports.format = format;
/**
 * 是否显示完整路径。
 */
exports.fullPath = false;
/**
 * 在未显示完整路径时使用的基路径。
 */
exports.displayRoot = process.env["INIT_CWD"] || process.cwd();
/**
 * 获取指定路径的友好显示名称。
 * @param path 要处理的路径。
 * @return 如果 *fullPath* 为 false 则返回基于 *cwd* 的相对路径，否则返回绝对路径。
 */
function getDisplayName(path) {
    if (exports.fullPath) {
        return path_1.resolvePath(path);
    }
    return path_1.relativePath(exports.displayRoot, path) || ".";
}
exports.getDisplayName = getDisplayName;
/**
 * 表示一条日志项。
 */
class LogEntry {
    /**
     * 初始化新的日志项。
     * @param data 要记录的日志数据。
     * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
     */
    constructor(data, args) {
        if (typeof data === "string") {
            this.message = data;
        }
        else if (data instanceof Error) {
            this.message = data.message;
            this.error = data;
        }
        else {
            data = Object.assign(this, data);
            if (!this.message) {
                this.message = this.error ? this.error.message : "";
            }
            if (this.fileName) {
                this.fileName = path_1.resolvePath(this.fileName);
            }
        }
        this.message = format(this.message, args);
    }
    /**
     * 获取当前日志数据的字符串形式。
     * @param colors 是否包含颜色信息。
     * @return 返回格式化后的日志。
     */
    toString(colors) {
        let result = "";
        // 添加插件。
        if (this.plugin) {
            result += log_1.addLogColor(`[${this.plugin}]`, 96 /* brightCyan */);
        }
        // 添加路径。
        if (this.fileName) {
            let path = getDisplayName(this.fileName);
            if (this.line != undefined) {
                path += "(" + (this.line + 1);
                if (this.column != undefined) {
                    path += "," + (this.column + 1);
                }
                path += ")";
            }
            result += log_1.addLogColor(path, 1 /* bright */) + ": ";
        }
        // 添加信息。
        if (exports.logLevel === 0 /* verbose */ || this.plugin == undefined || exports.logMaxLength <= 0 || this.message.length < exports.logMaxLength) {
            result += this.message;
        }
        else {
            result += this.message.substring(0, exports.logMaxLength - 3) + log_1.addLogColor("...", 90 /* brightBlack */);
        }
        // 添加源信息。
        const source = exports.logSource && (this.source != undefined ? this.source : this.content != undefined && this.line != undefined ? log_1.formatSource(this.content, exports.logSource.width, exports.logSource.height, exports.logSource.showLine, exports.logSource.showColumn, this.line, this.column, this.endLine, this.endColumn) : undefined);
        if (source) {
            result += `\n\n${log_1.addLogColor(source, 90 /* brightBlack */)}\n`;
        }
        // 添加堆栈信息。
        const stack = (exports.logLevel === 0 /* verbose */ || (this.showStack != undefined ? this.showStack : this.fileName == undefined && this.source == undefined)) && this.error && this.error.stack;
        if (stack) {
            result += `\n\n${log_1.addLogColor(stack, 90 /* brightBlack */)}\n`;
        }
        // 去除颜色信息。
        if (!colors) {
            result = log_1.removeLogColor(result);
        }
        return result;
    }
}
exports.LogEntry = LogEntry;
