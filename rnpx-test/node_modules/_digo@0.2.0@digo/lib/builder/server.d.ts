/// <reference types="node" />
import * as http from "http";
import { AsyncCallback } from "../utility/asyncQueue";
import { HttpServer } from "../utility/httpServer";
import { Matcher } from "../utility/matcher";
/**
 * 表示一个服务器。
 */
export declare class Server extends HttpServer {
    options: ServerOptions;
    /**
     * 当被子类重写时负责处理所有请求。
     * @param req 当前的请求对象。
     * @param res 当前的响应对象。
     */
    protected processRequest(req: http.IncomingMessage, res: http.ServerResponse): void;
    /**
     * 获取所有处理器。
     */
    handlers: {
        matcher: Matcher | RegExp;
        process(req: http.ServerRequest, res: http.ServerResponse): boolean | void;
    }[];
    /**
     * 向指定的请求写入文件。
     * @param req 当前的请求对象。
     * @param res 当前的响应对象。
     * @param statusCode 请求的错误码。
     * @param path 相关的路径。
     * @param data 相关的内容。
     */
    writeFile(req: http.IncomingMessage, res: http.ServerResponse, statusCode: number, path: string, data?: string | Buffer): void;
    /**
     * 向指定的请求写入目录。
     * @param req 当前的请求对象。
     * @param res 当前的响应对象。
     * @param statusCode 请求的错误码。
     * @param path 相关的路径。
     * @param data 相关的内容。
     */
    writeDir(req: http.IncomingMessage, res: http.ServerResponse, path: string): void;
    /**
     * 向指定的请求写入错误。
     * @param req 当前的请求对象。
     * @param res 当前的响应对象。
     * @param statusCode 请求的错误码。
     * @param path 相关的路径。
     */
    writeError(req: http.IncomingMessage, res: http.ServerResponse, statusCode: number, path?: string, data?: string): void;
    /**
     * 是否允许服务器跨域。
     */
    crossOrigin: boolean;
    /**
     * 当被子类重写时负责生成跨域头。
     * @param req 当前的请求对象。
     * @return 返回用于指示跨域的头。
     */
    protected getCoressOriginHeaders(req: http.IncomingMessage): {
        "Access-Control-Allow-Origin": string | string[];
        "Access-Control-Allow-Methods": string | string[];
        "Access-Control-Allow-Headers": string | string[];
        "Access-Control-Allow-Credentials": string;
    };
    /**
     * 当服务器错误时执行。
     * @param e 当前发生的错误。
     */
    protected onError(e: NodeJS.ErrnoException): void;
    /**
     * 初始化新的服务器。
     * @param options 服务器的配置。
     */
    constructor(options?: ServerOptions);
    /**
     * 启动服务器。
     * @param callback 启动的回调函数。
     */
    start(callback?: AsyncCallback): void;
    /**
     * 关闭当前服务器。
     * @param callback 关闭的回调函数。
     */
    close(callback?: AsyncCallback): void;
    /**
     * 将指定的物理路径转为网址。
     * @param path 要转换的物理路径。
     * @return 返回网址。如果转换失败则返回 null。
     */
    pathToUrl(path: string): string;
    /**
     * 将指定的地址转为物理路径。
     * @param url 要转换的网址。
     * @return 返回物理路径。如果转换失败则返回 null。
     */
    urlToPath(url: string): string;
    /**
     * 获取各扩展名的默认 MIME 类型。
     */
    mimeTypes: {
        [key: string]: string;
    };
    /**
     * 获取自动插入的 HTTP 头。
     */
    headers: {
        [key: string]: string;
    };
    /**
     * 获取默认首页。
     */
    defaultPages: string[];
    /**
     * 存储所有文件的内容。
     */
    readonly files: {
        [path: string]: Buffer;
    };
    /**
     * 当文件更新后隐藏当前文件。
     * @param path 当前写入的文件路径。
     * @param buffer 当前写入的文件内容。
     */
    saveFile(path: string, buffer: Buffer | null): void;
}
/**
 * 表示服务器选项。
 */
export interface ServerOptions {
    /**
     * 服务器地址。
     */
    url?: string;
    /**
     * 服务器端口。
     */
    port?: number;
    /**
     * 所有文件的根目录。
     */
    root?: string;
    /**
     * 所有处理器。
     */
    handlers?: {
        [glob: string]: ((req: http.ServerRequest, res: http.ServerResponse) => boolean | void) | string;
    };
    /**
     * 所有插件。
     */
    plugins?: (((server: Server, options: any) => void) | string)[] | {
        [plugin: string]: any;
    };
    /**
     * 要执行的任务函数。
     */
    task?: AsyncCallback;
    /**
     * 获取默认首页。
     */
    defaultPages?: string[];
}
/**
 * 当前的开发服务器。
 */
export declare var server: Server | null;
/**
 * 启动服务器。
 * @param options 服务器配置。
 * @return 返回服务器对象。
 */
export declare function startServer(options?: ServerOptions): Server;
