/// <reference types="node" />
import { Writable, WritableOptions } from "stream";
import { SourceMapBuilder } from "../utility/sourceMap";
import { File } from "./file";
/**
 * 表示一个写入器。
 */
export declare class Writer {
    readonly file: File;
    readonly options: WriterOptions;
    /**
     * 初始化新的写入器。
     * @param file 写入的目标文件。
     * @param options 写入器的选项。
     */
    constructor(file: File, options?: WriterOptions);
    /**
     * 当前使用的缩进字符串。
     */
    indentString: string;
    /**
     * 增加一个缩进。
     */
    indent(): void;
    /**
     * 减少一个缩进。
     */
    unindent(): void;
    /**
     * 已写入的文本内容。
     */
    protected content: string;
    /**
     * 返回当前写入的文本内容。
     * @return 返回文本内容。
     */
    toString(): string;
    /**
     * 写入一段文本。
     * @param content 要写入的内容。
     * @param startIndex 要写入的内容的开始索引(从 0 开始)。
     * @param endIndex 要写入的内容的结束索引(从 0 开始)。
     * @param sourcePath 内容的源文件路径。
     * @param sourceMap 源文件中的源映射。如果存在将自动合并到当前源映射。
     * @param sourceMap 源文件中的源映射。如果存在将自动合并到当前源映射。
     * @param sourceLine 内容在源文件中的行号(从 0 开始)。
     * @param sourceColumn 内容在源文件中的列号(从 0 开始)。
     */
    write(content: string, startIndex?: number, endIndex?: number, sourcePath?: string, sourceMap?: SourceMapBuilder, sourceLine?: number, sourceColumn?: number): void;
    /**
     * 写入一个文件的内容。
     * @param content 要写入的文件。
     * @param startIndex 要写入的内容的开始索引(从 0 开始)。
     * @param endIndex 要写入的内容的结束索引(从 0 开始)。
     */
    writeFile(file: File, startIndex?: number, endIndex?: number): void;
    /**
     * 将当前写入器的内容保存到文件。
     */
    end(): void;
}
/**
 * 表示一个支持源映射的写入器。
 */
export declare class SourceMapWriter extends Writer {
    /**
     * 当前使用的源映射生成器。
     */
    private readonly sourceMapBuilder;
    /**
     * 获取当前生成的源映射。
     */
    readonly sourceMap: import("../utility/sourceMap").SourceMapObject;
    /**
     * 当前写入的行号。
     */
    private line;
    /**
     * 当前写入的列号。
     */
    private column;
    write(content: string, startIndex?: number, endIndex?: number, sourcePath?: string, sourceMap?: SourceMapBuilder, sourceLine?: number, sourceColumn?: number): void;
    /**
     * 写入一个文件的内容。
     * @param content 要写入的文件。
     * @param startIndex 要写入的内容的开始索引。
     * @param endIndex 要写入的内容的结束索引。
     */
    writeFile(file: File, startIndex?: number, endIndex?: number): void;
    /**
     * 将当前写入器的内容保存到文件。
     */
    end(): void;
}
/**
 * 表示写入器的配置。
 */
export interface WriterOptions {
    /**
     * 是否支持生成源映射。
     */
    sourceMap?: boolean;
    /**
     * 是否只生成行信息。
     */
    sourceMapLineMappingsOnly?: boolean;
    /**
     * 缩进字符。
     */
    indentChar?: string;
}
/**
 * 表示一个缓存流。
 */
export declare class BufferStream extends Writable {
    /**
     * 获取当前写入的目标文件。
     */
    readonly file: File;
    /**
     * 存储最终的缓存。
     */
    private buffer;
    /**
     * 获取当前流的长度。
     */
    length: number;
    /**
     * 获取当前流的容器大小。
     */
    readonly capacity: number;
    /**
     * 初始化新的缓存流。
     * @param file 写入的目标文件。
     * @param options 原始写入配置。
     */
    constructor(file: File, options?: StreamOptions);
    /**
     * 确保当前流可以存放指定长度的缓存。
     * @param length 要设置的新长度。
     */
    ensureCapacity(length: number): void;
    /**
     * 底层实现写入操作。
     * @param chunk 要写入的缓存。
     * @param encoding 写入的编码。
     * @param callback 写入的回调。
     * @override
     */
    _write(chunk: Buffer, encoding: string, callback: Function): void;
    /**
     * 获取当前流的内容。
     * @param start 开始的位置。
     * @param end 结束的位置。
     * @return 返回复制的缓存对象。
     */
    toBuffer(start?: number, end?: number): Buffer;
    /**
     * 获取当前流的字符串形式。
     * @param start 开始的位置。
     * @param end 结束的位置。
     * @return 返回字符串。
     */
    toString(encoding?: string, start?: number, end?: number): string;
    /**
     * 将当前写入器的内容保存到文件。
     */
    end(): void;
}
/**
 * 表示流的配置。
 */
export interface StreamOptions extends WritableOptions {
    /**
     * 初始的缓存大小。
     */
    capacity?: number;
}
