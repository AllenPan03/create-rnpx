import { Pattern } from "../utility/matcher";
import { AsyncCallback } from "../utility/asyncQueue";
import { File } from "./file";
/**
 * 表示一个文件列表。
 */
export declare class FileList {
    /**
     * 上一级列表。
     */
    private prev;
    /**
     * 下一级列表。
     */
    private next;
    /**
     * 获取当前列表的根列表。
     */
    readonly root: FileList;
    /**
     * 获取当前列表的最终结果列表。
     */
    readonly result: FileList;
    /**
     * 判断当前列表是否包含指定的子级列表。
     * @param child 要判断的列表。
     * @return 如果包含则返回 true，否则返回 false。
     */
    private hasNext;
    /**
     * 当前列表的处理器。
     */
    private processor;
    /**
     * 当前列表的处理器选项。
     */
    private processorOptions;
    /**
     * 向当前列表添加一个文件。
     * @param file 要添加的文件。
     * @param root 文件所属的根列表。
     */
    add(file: File, root?: FileList): void;
    /**
     * 通知当前列表所有文件已添加。
     */
    end(): void;
    /**
     * 检查是否可触发 before 事件。
     */
    private onBefore;
    /**
     * 存储是否正在添加文件。
     */
    private _adding;
    /**
     * 存储当前列表的等待任务数。
     */
    private _pending;
    /**
     * 如果处理器含 `end` 则用于收集所有文件。
     */
    private files;
    /**
     * 当文件已载入后执行。
     * @param file 要添加的文件。
     * @param root 文件所属的根列表。
     */
    private onLoad;
    /**
     * 当文件已添加后执行。
     * @param file 要添加的文件。
     * @param root 文件所属的根列表。
     * @param addToNext 是否将当前文件传递给下级处理。
     */
    private onAdd;
    /**
     * 检查是否可触发 end 事件。
     */
    private onAfter;
    /**
     * 当作为顶级列表时表示所有子列表执行完成后的回调。
     */
    protected done(): void;
    /**
     * 当所有文件已添加时执行。
     */
    private onEnd;
    /**
     * 将当前列表所有文件传递给指定的处理器。
     * @param processor 要传递的目标处理器。
     * @param options 供处理器使用的只读配置对象。
     * @return 返回用于接收处理后文件的文件列表。
     * @example
     * list.pipe((file) => file.content += "1");
     * list.pipe((file, options, done) => done());
     */
    pipe<T>(processor: string | Processor<T>["add"] | Processor<T>, options?: T): FileList;
    /**
     * 设置当前列表完成后的回调函数。
     * @param callback 要执行的回调函数。
     * @return 返回用于接收处理后文件的文件列表。
     */
    then(callback: AsyncCallback): FileList;
    /**
     * 筛选当前文件列表并返回一个新的文件列表。
     * @param patterns 用于筛选文件的通配符、正则表达式、函数或以上模式组合的数组。
     * @return 返回已筛选的文件列表。
     */
    src(...patterns: Pattern[]): FileList;
    /**
     * 将所有文件移动到指定的文件夹。
     * @param dir 要保存的目标文件文件夹。如果为空则保存到原文件夹。
     * @return 返回用于接收处理后文件的文件列表。
     */
    dest(dir?: string): FileList;
    /**
     * 删除所有源文件。
     * @param deleteDir 指示是否删除空的父文件夹。
     * @return 返回用于接收处理后文件的文件列表。
     */
    delete(deleteDir?: boolean): FileList;
    /**
     * 创建当前列表所有文件的副本。
     * @return 返回用于接收处理后文件的文件列表。
     */
    clone(): FileList;
}
/**
 * 表示一个处理器。
 */
export interface Processor<T> {
    /**
     * 当前处理器的名字。
     */
    name?: string;
    /**
     * 初始化处理器选项。
     * @param options 传递给处理器的只读选项。
     * @param result 结果列表。
     * @return 返回更新后的选项。
     */
    init?(options: T, result: FileList): any;
    /**
     * 在添加第一个文件前执行。
     * @param options 传递给处理器的只读选项。
     * @param result 结果列表。
     */
    before?(options: T, result: FileList): void;
    /**
     * 如果为 true 则执行处理器前会首先载入文件内容。
     */
    load?: boolean;
    /**
     * 当添加一个文件后执行。
     * @param file 要处理的文件。
     * @param options 传递给处理器的只读选项。
     * @param done 指示异步操作完成的回调函数。如果未声明此参数则表示当前处理器是同步执行的。如果函数的第一个参数为 false 则不再继续处理此文件。
     * @param result 结果列表。
     * @param root 当前文件的来源列表。
     * @return 如果函数返回 false 则不再继续处理此文件。
     */
    add?(file: File, options: T, done: (result?: boolean) => void, result: FileList, root: FileList): boolean | void;
    /**
     * 当所有文件添加完成后执行。
     * @param options 传递给处理器的只读选项。
     * @param result 结果列表。
     */
    after?(options: T, result: FileList): void;
    /**
     * 是否收集文件列表。
     */
    collect?: boolean;
    /**
     * 当所有文件添加完成并已处理后执行。
     * @param files 要处理的文件列表。仅当 `collect` 为 true 时有值。
     * @param options 传递给处理器的只读选项。
     * @param result 结果列表。
     * @param done 指示异步操作完成的回调函数。如果未声明此参数则表示当前处理器是同步执行的。
     */
    end?(files: File[], options: T, result: FileList, done: () => void): void;
}
