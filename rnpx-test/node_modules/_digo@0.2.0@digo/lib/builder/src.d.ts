import { Matcher, Pattern } from "../utility/matcher";
import { File } from "./file";
import { FileList } from "./fileList";
/**
 * 全局匹配器。
 */
export declare var globalMatcher: Matcher;
/**
 * 表示一个根文件列表。
 */
export declare class RootFileList extends FileList {
    /**
     * 当前列表的根匹配器。
     */
    readonly matcher: Matcher;
    /**
     * 创建属于当前列表的文件。
     * @param path 要添加的文件对象。
     * @return 返回新建的文件对象。
     */
    createFile(path: string): File;
    /**
     * 当作为顶级列表时表示所有子列表执行完成后的回调。
     */
    protected done(): void;
    /**
     * 是否已锁定。
     */
    private _locked;
    /**
     * 向当前列表添加一个文件。
     * @param file 要添加的文件。
     * @param root 文件所属的根列表。
     */
    add(file: File, root?: FileList): void;
    /**
     * 通知当前列表所有文件已添加。
     */
    end(): void;
}
/**
 * 筛选指定的文件并返回一个文件列表。
 * @param patterns 用于筛选文件的通配符、正则表达式、函数或以上组合的数组。
 * @return 返回一个文件列表对象。
 */
export declare function src(...patterns: (Pattern | File | FileList)[]): RootFileList;
