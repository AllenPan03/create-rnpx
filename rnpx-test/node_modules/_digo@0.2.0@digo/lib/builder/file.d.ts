/// <reference types="node" />
import { Stats } from "fs";
import { Location } from "../utility/location";
import { Pattern } from "../utility/matcher";
import { SourceMapBuilder, SourceMapData, SourceMapObject } from "../utility/sourceMap";
import { LogEntry, LogLevel } from "./logging";
import { BufferStream, StreamOptions, Writer, WriterOptions } from "./writer";
/**
 * 表示一个文件。
 */
export declare class File {
    /**
     * 获取当前文件的初始物理路径。如果当前文件是动态创建的则返回 undefined。
     */
    readonly initialPath?: string;
    /**
     * 当前文件的目标基路径。
     */
    base: string;
    /**
     * 当前文件的目标名称。名称是相对于基路径的相对路径，路径以 / 为分隔符。
     */
    name?: string;
    /**
     * 初始化新的文件。
     * @param path 文件的初始路径。
     * @param base 文件的基路径。
     */
    constructor(path?: string, base?: string);
    /**
     * 获取当前文件的源绝对路径。
     */
    readonly srcPath: string;
    /**
     * 获取当前文件的目标绝对路径。
     */
    readonly destPath: string;
    /**
     * 当前文件的绝对路径。如果未设置保存路径则返回 undefined。
     */
    path: string;
    /**
     * 获取当前文件的源文件夹绝对路径。
     */
    readonly srcDir: string;
    /**
     * 获取当前文件的目标文件夹绝对路径。
     */
    readonly destDir: string;
    /**
     * 当前文件的文件夹绝对路径。
     */
    dir: string;
    /**
     * 获取当前文件的源扩展名。
     */
    readonly srcExt: string;
    /**
     * 获取当前文件的目标扩展名。
     */
    readonly destExt: string;
    /**
     * 当前文件的扩展名。
     */
    ext: string;
    /**
     * 获取当前文件的字符串形式。
     */
    toString(): string;
    /**
     * 提供直接查看当前文件对象的方法。
     */
    protected inspect(): string;
    /**
     * 存储当前文件的源二进制内容。
     */
    private _srcBuffer;
    /**
     * 存储当前文件的源文本内容。
     */
    private _srcContent;
    /**
     * 获取当前文件的源二进制内容。
     */
    readonly srcBuffer: Buffer;
    /**
     * 获取当前文件的源文本内容。
     */
    readonly srcContent: string;
    /**
     * 存储当前文件的目标二进制内容。
     */
    private _destBuffer;
    /**
     * 存储当前文件的目标文本内容。
     */
    private _destContent;
    /**
     * 获取当前文件的目标二进制内容。
     */
    readonly destBuffer: Buffer;
    /**
     * 获取当前文件的目标文本内容。
     */
    readonly destContent: string;
    /**
     * 当前文件的最终保存二进制内容。
     */
    buffer: Buffer;
    /**
     * 当前文件的最终保存文本内容。
     */
    content: string;
    /**
     * 当前文件的最终内容。
     */
    data: string | Buffer;
    /**
     * 判断当前文件是否已修改。
     */
    readonly modified: boolean;
    /**
     * 读写当前文件使用的编码。
     */
    encoding: string;
    /**
     * 标记当前文件已被修改。
     */
    private setModified;
    /**
     * 存储当前文件的每行第一个字符的索引值。
     */
    private index;
    /**
     * 计算指定索引对应的行列号。
     * @param index 要检查的索引。
     * @return 返回对应的行列号。
     */
    indexToLocation(index: number): Location;
    /**
     * 计算指定行列号对应的索引。
     * @param location 要检查的行列号。
     * @return 返回对应的索引。
     */
    locationToIndex(location: Location): number;
    /**
     * 当前文件是否需要生成源映射。
     */
    sourceMap: boolean;
    /**
     * 当前文件的源映射保存路径。
     */
    sourceMapPath: string;
    /**
     * 当前文件的源映射保存文件夹。
     */
    sourceMapDir: string;
    /**
     * 是否在源文件插入 #SourceMappingURL。
     */
    sourceMapEmit: boolean;
    /**
     * 是否内联源映射到源文件。
     * @desc 仅当 sourceMapEmit 为 true 时有效。
     */
    sourceMapInline: boolean;
    /**
     * 在源文件引用源映射的地址。
     * @desc 仅当 sourceMapEmit 为 true 时有效。
     */
    sourceMapUrl: string;
    /**
     * 是否在源映射插入 file 段。
     */
    sourceMapIncludeFile: boolean;
    /**
     * 源映射中的 sourceRoot 内容。
     */
    sourceMapRoot: string;
    /**
     * 是否在源映射插入 sourcesContent 段。
     */
    sourceMapIncludeSourcesContent: boolean;
    /**
     * 是否在源映射插入 names 段。
     */
    sourceMapIncludeNames: boolean;
    /**
     * 当前文件的源映射数据。
     */
    sourceMapData?: SourceMapData;
    /**
     * 获取当前文件的源映射构建器。
     * @return 返回源映射对象。如果不存在则返回 undefined。
     */
    readonly sourceMapBuilder: SourceMapBuilder;
    /**
     * 当前文件的源映射对象。
     */
    sourceMapObject: SourceMapObject;
    /**
     * 当前文件的源映射字符串。
     */
    sourceMapString: string;
    /**
     * 合并指定的源映射。如果当前文件已经存在源映射则进行合并。
     * @param sourceMapData 要应用的源映射。
     */
    applySourceMap(sourceMapData: SourceMapData): void;
    /**
     * 获取当前文件的最终源映射。
     * @return 返回源映射对象。如果不存在则返回 undefined。
     */
    getSourceMap(): SourceMapObject;
    /**
     * 当前文件的生成模式。
     */
    buildMode: BuildMode;
    /**
     * 判断当前文件是否已载入。
     */
    readonly loaded: boolean;
    /**
     * 载入当前文件内容。
     * @param callback 异步操作完成后的回调函数。
     */
    load(callback?: (error: NodeJS.ErrnoException | null, file: File) => void): void;
    /**
     * 保存当前文件到指定路径。
     * @param dir 要保存的目标文件夹路径。如果为空则保存到当前文件夹。
     * @param callback 异步操作完成后的回调函数。
     */
    save(dir?: string, callback?: (error: NodeJS.ErrnoException | null, file: File) => void): void;
    /**
     * 删除当前源文件。
     * @param deleteDir 是否删除空的父文件夹。
     * @param callback 异步操作完成后的回调函数。
     */
    delete(deleteDir?: boolean, callback?: (error: NodeJS.ErrnoException | null, file: File) => void): void;
    /**
     * 是否允许覆盖源文件。
     */
    overwrite: boolean;
    /**
     * 获取当前文件累积的错误数。
     */
    errorCount: number;
    /**
     * 获取当前文件累积的警告数。
     */
    warningCount: number;
    /**
     * 记录一条和当前文件相关的日志。
     * @param data 要记录的日志数据。
     * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
     * @param level 要记录的日志等级。
     */
    log(data: string | Error | FileLogEntry, args?: {
        [key: string]: any;
    }, level?: LogLevel): void;
    /**
     * 记录生成当前文件时出现的错误。
     * @param data 要记录的日志数据。
     * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
     */
    error(data: string | Error | FileLogEntry, args?: {
        [key: string]: any;
    }): void;
    /**
     * 记录生成当前文件时出现的警告。
     * @param data 要记录的日志数据。
     * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
     */
    warning(data: string | Error | FileLogEntry, args?: {
        [key: string]: any;
    }): void;
    /**
     * 记录生成当前文件时的详细信息。
     * @param data 要记录的日志数据。
     * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
     */
    verbose(data: string | Error | FileLogEntry, args?: {
        [key: string]: any;
    }): void;
    /**
     * 当前文件的依赖项。
     */
    deps: string[];
    /**
     * 添加当前文件的依赖项。
     * @param path 相关的路径。
     * @param source 当前依赖的来源。
     */
    dep(path: string | string[], source?: LogEntry): void;
    /**
     * 当前文件的引用项。
     */
    refs: string[];
    /**
     * 添加当前文件的引用项。
     * @param path 相关的路径。
     * @param source 当前引用的来源。
     */
    ref(path: string | string[], source?: LogEntry): void;
    /**
     * 创建一个文本写入器。
     * @param options 写入器的配置。
     * @return 返回一个写入器。
     */
    createWriter(options?: WriterOptions): Writer;
    /**
     * 创建一个二进制写入流。
     * @param options 写入流的配置。
     * @return 返回一个写入流。
     */
    createStream(options?: StreamOptions): BufferStream;
    /**
     * 创建当前文件的副本。
     * @return 返回新文件对象。
     */
    clone(): File;
    /**
     * 判断当前文件是否实际存在。
     */
    readonly exists: boolean;
    /**
     * 获取当前文件的属性对象。
     */
    readonly stats: Stats;
    /**
     * 测试当前文件名是否匹配指定的匹配器。
     * @param matcher 要测试通配符、正则表达式、函数或以上的匹配器组成的数组。
     * @return 如果匹配则返回 true，否则返回 false。
     */
    test(matcher: Pattern): boolean;
    /**
     * 解析当前文件内的地址所表示的实际地址。
     * @param url 要解析的地址。如 `../a.js?a=1`。
     * @return 返回解析好的绝对地址。
     */
    resolve(url: string): string;
    /**
     * 获取在当前文件内引用指定地址或文件所使用的相对地址。
     * @param url 要解析的地址或文件。
     * @return 返回解析好的相对地址。
     */
    relative(url: string | File): string;
}
/**
 * 表示生成模式。
 */
export declare const enum BuildMode {
    /**
     * 生成模式。
     */
    build = 0,
    /**
     * 清理模式。
     */
    clean = 1,
    /**
     * 预览模式。
     */
    preview = 2,
    /**
     * 监听模式。
     */
    watch = 3,
    /**
     * 服务器模式。
     */
    server = 4
}
/**
 * 文件的生成模式。
 */
export declare var buildMode: BuildMode;
/**
 * 读写文件使用的默认编码。
 */
export declare var encoding: string;
/**
 * 是否允许覆盖源文件。
 */
export declare var overwrite: boolean;
/**
 * 是否启用源映射。
 */
export declare var sourceMap: boolean;
/**
 * 用于计算每个文件的源映射路径的回调函数。
 * @param file 当前相关的文件。
 * @return 返回源映射的绝对路径。
 */
export declare var sourceMapPath: null | ((file: File) => string);
/**
 * 用于计算每个文件的源映射地址的回调函数。
 * @param file 当前相关的文件。
 * @return 返回源映射地址。
 */
export declare var sourceMapUrl: null | ((file: File) => string);
/**
 * 用于计算源映射中指定源文件地址的回调函数。
 * @param source 要计算的源文件地址。
 * @param file 当前相关的文件。
 * @return 返回对应的源文件地址。
 */
export declare var sourceMapSource: null | ((source: string, file: File) => string);
/**
 * 用于计算源映射中指定源文件内容的回调函数。
 * @param source 要计算的源文件地址。
 * @param file 当前相关的文件。
 * @return 返回对应的源文件内容。
 */
export declare var sourceMapSourceContent: null | ((source: string, file: File) => string);
/**
 * 是否在源文件中内联源映射。
 */
export declare var sourceMapInline: boolean | ((file: File) => boolean);
/**
 * 是否在源文件追加对源映射的引用注释。
 */
export declare var sourceMapEmit: boolean | ((file: File) => boolean);
/**
 * 源映射中引用源的跟地址。
 */
export declare var sourceMapRoot: string | ((file: File) => string);
/**
 * 是否在源映射插入 sourcesContent 段。
 */
export declare var sourceMapIncludeSourcesContent: boolean | ((file: File) => boolean);
/**
 * 是否在源映射插入 file 段。
 */
export declare var sourceMapIncludeFile: boolean | ((file: File) => boolean);
/**
 * 是否在源映射插入 names 段。
 */
export declare var sourceMapIncludeNames: boolean | ((file: File) => boolean);
/**
 * 生成文件源映射的回调函数。
 * @param sourceMap 当前的源映射对象。
 * @param file 当前相关的文件。
 */
export declare var onSourceMapValidate: (sourceMap: SourceMapObject, file: File) => void;
/**
 * 即将保存文件时的回调函数。
 * @param file 当前相关的文件。
 * @return 如果函数返回 false，则不保存此文件。
 */
export declare var onFileValidate: (file: File) => boolean | void;
/**
 * 保存文件后的回调函数。
 * @param file 当前相关的文件。
 */
export declare var onFileSave: (file: File) => void;
/**
 * 当删除文件后的回调函数。
 * @param file 当前相关的文件。
 */
export declare var onFileDelete: (file: File) => void;
/**
 * 自定义写入文件的方法。
 * @param path 当前写入的文件路径。
 * @param buffer 当前写入的文件内容。如果为 null 表示需删除文件。
 */
export declare var saveFile: null | ((path: string, buffer: Buffer | null) => void);
/**
 * 获取已处理的文件数。
 */
export declare var fileCount: number;
/**
 * 是否允许系统使用源映射信息。
 */
export declare var evalSourceMap: boolean;
/**
 * 表示处理文件时产生的日志项。
 */
export declare class FileLogEntry extends LogEntry {
    /**
     * 源文件对象。
     */
    readonly file?: File;
    /**
     * 是否允许执行源映射。
     */
    readonly evalSourceMap?: boolean;
    /**
     * 初始化新的日志项。
     * @param file 源文件对象。
     * @param data 要处理的日志数据。
     * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
     */
    constructor(file: File, data: string | Error | LogEntry, args?: {
        [key: string]: any;
    });
}
/**
 * 处理文件时产生日志的回调函数。
 * @param log 要记录的日志项。
 * @param level 要记录的日志等级。
 * @param file 当前正在生成的文件。
 * @return 如果函数返回 false，则忽略当前日志。
 */
export declare var onFileLog: (file: File, log: FileLogEntry, level: LogLevel) => boolean | void;
/**
 * 处理文件时发现依赖的回调函数。
 * @param file 当前正在生成的文件。
 * @param path 要依赖的文件路径。
 * @param source 要依赖的文件路径。
 * @return 如果函数返回 false，则忽略当前依赖。
 */
export declare var onFileDep: (file: File, path: string, source?: LogEntry) => boolean | void;
/**
 * 处理文件时发现引用的回调函数。
 * @param file 当前正在生成的文件。
 * @param path 要引用的文件路径。
 * @param source 要引用的文件路径。
 * @return 如果函数返回 false，则忽略当前引用。
 */
export declare var onFileRef: (file: File, path: string, source?: LogEntry) => boolean | void;
