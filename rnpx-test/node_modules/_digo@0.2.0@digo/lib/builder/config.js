"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("../utility/fs");
const src_1 = require("./src");
const logging = require("./logging");
const progress = require("./progress");
const file = require("./file");
const run = require("./run");
const watch = require("./watch");
/**
 * 设置全局选项。
 * @param configs 要设置的选项。
 */
function config(configs) {
    for (const key in configs) {
        const value = configs[key];
        switch (key) {
            case "verbose":
                if (value) {
                    logging.logLevel = 0 /* verbose */;
                }
                break;
            case "slient":
                if (value) {
                    progress.progress = false;
                    logging.logLevel = 6 /* slient */;
                }
                break;
            case "logLevel":
                logging.logLevel = typeof value === "string" ? logging.LogLevel[value] : value;
                break;
            case "fullPath":
                logging.fullPath = value;
                break;
            case "logMaxLength":
                logging.logMaxLength = value;
                break;
            case "logSource":
                logging.logSource = typeof value === "boolean" ? (value ? logging.logSource : null) : value;
                break;
            case "colors":
                logging.colors = value;
                break;
            case "displayRoot":
                logging.displayRoot = value;
                break;
            case "dict":
                logging.dict = value || {};
                break;
            case "progress":
                progress.progress = value;
                break;
            case "overwrite":
                file.overwrite = value;
                break;
            case "buildMode":
                file.buildMode = typeof value === "string" ? file.BuildMode[value] : value;
                break;
            case "encoding":
                file.encoding = value;
                break;
            case "sourceMap":
                file.sourceMap = value;
                break;
            case "evalSourceMap":
                file.evalSourceMap = value;
                break;
            case "sourceMapPath":
                file.sourceMapPath = typeof value === "string" ? file => file.name == undefined ? undefined : value.replace("{name}", file.name) : value;
                break;
            case "sourceMapUrl":
                file.sourceMapUrl = typeof value === "string" ? file => file.name == undefined ? undefined : value.replace("{name}", file.name) : value;
                break;
            case "sourceMapSource":
                file.sourceMapSource = value;
                break;
            case "sourceMapInline":
                file.sourceMapInline = value;
                break;
            case "emitSourceMap":
                file.sourceMapEmit = value;
                break;
            case "sourceMapRoot":
                file.sourceMapRoot = value;
                break;
            case "sourceMapIncludeSourcesContent":
                file.sourceMapIncludeSourcesContent = value;
                break;
            case "sourceMapIncludeFile":
                file.sourceMapIncludeFile = value;
                break;
            case "sourceMapIncludeNames":
                file.sourceMapIncludeNames = value;
                break;
            case "filter":
                src_1.globalMatcher.add(value);
                break;
            case "ignore":
                src_1.globalMatcher.addIgnore(value);
                break;
            case "ignoreFile":
                loadIgnore(value);
                break;
            case "report":
                run.report = value;
                break;
            case "usePolling":
                watch.polling = value;
                break;
        }
    }
}
exports.config = config;
/**
 * 载入忽略文件（如 .gitignore）。
 * @param path 要载入的文件路径。
 */
function loadIgnore(path) {
    fs_1.readFile(path).toString().replace(/^\s*([^#\s](?:\\\s|\s\S|\S)*)\s*$/gm, (_, pattern) => {
        src_1.globalMatcher.addIgnore(pattern);
        return "";
    });
}
