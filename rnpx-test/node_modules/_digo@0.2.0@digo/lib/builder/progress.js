"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lang_1 = require("../utility/lang");
const log_1 = require("../utility/log");
const statusBar_1 = require("../utility/statusBar");
const logging_1 = require("./logging");
/**
 * 是否在控制台显示进度。
 */
exports.progress = process.stdout.isTTY === true;
/**
 * 获取所有任务数。
 */
exports.taskCount = 0;
/**
 * 获取所有已完成的任务数。
 */
exports.doneTaskCount = 0;
/**
 * 记录将开始执行指定的任务。
 * @param task 任务内容。
 * @param args 格式化参数。*task* 中 `{x}` 会被替换为 `args.x` 的值。
 * @return 返回任务序号。
 */
function begin(task, args) {
    exports.taskCount++;
    task = logging_1.format(task, args);
    if (logging_1.logLevel === 0 /* verbose */) {
        logging_1.verbose("{brightBlack:now} Starting: {task}", {
            now: lang_1.formatDate(undefined, "[HH:mm:ss]"),
            task: task
        });
    }
    else if (exports.progress) {
        statusBar_1.updateStatus(`${log_1.addLogColor(`(${exports.doneTaskCount}/${exports.taskCount})`, 36 /* cyan */)} ${task}`);
    }
    return task;
}
exports.begin = begin;
/**
 * 记录已执行指定的任务。
 * @param task 要结束的任务序号。
 */
function end(task) {
    exports.doneTaskCount++;
    if (logging_1.logLevel === 0 /* verbose */) {
        logging_1.verbose("{brightBlack:now} Finished: {task}", {
            now: lang_1.formatDate(undefined, "[HH:mm:ss]"),
            task: task
        });
    }
    else if (exports.progress && exports.doneTaskCount === exports.taskCount) {
        statusBar_1.updateStatus(null);
    }
}
exports.end = end;
