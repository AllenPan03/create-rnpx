/**
 * 表示日志等级。
 */
export declare const enum LogLevel {
    /**
     * 详细信息。
     */
    verbose = 0,
    /**
     * 普通日志。
     */
    log = 1,
    /**
     * 信息。
     */
    info = 2,
    /**
     * 警告。
     */
    warning = 3,
    /**
     * 错误。
     */
    error = 4,
    /**
     * 致命错误。
     */
    fatal = 5,
    /**
     * 无日志。
     */
    slient = 6
}
/**
 * 允许输出的最低日志等级。
 */
export declare var logLevel: LogLevel;
/**
 * 允许输出的最大日志长度。0 表示不限制。
 */
export declare var logMaxLength: number;
/**
 * 在控制台显示源内容的格式。如果设为 null 则不显示源内容。
 */
export declare var logSource: {
    /**
     * 最大显示的宽度。如果小于等于 0 则表示和控制台实际宽度的差。
     */
    width: number;
    /**
     * 最大显示的高度。
     */
    height: number;
    /**
     * 是否高亮行。
     */
    showLine: boolean;
    /**
     * 是否高亮列。
     */
    showColumn: boolean;
};
/**
 * 是否在控制台显示带颜色的文本。
 */
export declare var colors: boolean;
/**
 * 记录日志时的回调函数。
 * @param log 要记录的日志项。
 * @param level 要记录的日志等级。
 * @return 如果函数返回 false，则不在控制台输出当前日志。
 */
export declare var onLog: (log: LogEntry, level: LogLevel) => boolean;
/**
 * 获取累积的警告数。
 */
export declare var warningCount: number;
/**
 * 获取累积的错误数。
 */
export declare var errorCount: number;
/**
 * 记录一条日志。
 * @param data 要记录的日志。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 * @param level 要记录的日志等级。
 */
export declare function log(data: string | Error | LogEntry, args?: {
    [key: string]: any;
}, level?: LogLevel): void;
/**
 * 记录一条信息日志。
 * @param data 要记录的日志数据。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 */
export declare function info(data: string | Error | LogEntry, args?: {
    [key: string]: any;
}): void;
/**
 * 记录一条警告日志。
 * @param data 要记录的日志数据。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 */
export declare function warning(data: string | Error | LogEntry, args?: {
    [key: string]: any;
}): void;
/**
 * 记录一条错误日志。
 * @param data 要记录的日志数据。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 */
export declare function error(data: string | Error | LogEntry, args?: {
    [key: string]: any;
}): void;
/**
 * 记录一条致命错误日志。
 * @param data 要记录的日志数据。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 */
export declare function fatal(data: string | Error | LogEntry, args?: {
    [key: string]: any;
}): void;
/**
 * 记录一条详细日志。
 * @param data 要记录的日志数据。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 */
export declare function verbose(data: string | Error | LogEntry, args?: {
    [key: string]: any;
}): void;
/**
 * 所有消息的本地化版本。
 */
export declare var dict: {
    [message: string]: string;
};
/**
 * 格式化指定的日志信息。
 * @param message 要处理的日志信息。
 * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
 * @return 返回已格式化的消息。
 * @example format("abc{a}{b}", { a: 1, b: 2 }) // "abc1"
 * @example format("abc{0}{1}", [1, 2]) // "abc12"
 */
export declare function format(message: string, args?: {
    [key: string]: any;
}): string;
/**
 * 是否显示完整路径。
 */
export declare var fullPath: boolean;
/**
 * 在未显示完整路径时使用的基路径。
 */
export declare var displayRoot: string;
/**
 * 获取指定路径的友好显示名称。
 * @param path 要处理的路径。
 * @return 如果 *fullPath* 为 false 则返回基于 *cwd* 的相对路径，否则返回绝对路径。
 */
export declare function getDisplayName(path: string): string;
/**
 * 表示一条日志项。
 */
export declare class LogEntry {
    /**
     * 所属的插件名。
     */
    readonly plugin?: string;
    /**
     * 日志信息。
     */
    readonly message?: string;
    /**
     * 源文件名。
     */
    readonly fileName?: string;
    /**
     * 行号(从 0 开始)。
     */
    readonly line?: number;
    /**
     * 列号(从 0 开始)。
     */
    readonly column?: number;
    /**
     * 结束行号(从 0 开始)。
     */
    readonly endLine?: number;
    /**
     * 结束列号(从 0 开始)。
     */
    readonly endColumn?: number;
    /**
     * 原始错误对象。
     */
    readonly error?: Error;
    /**
     * 是否打印错误堆栈信息。
     */
    readonly showStack?: boolean;
    /**
     * 源内容。
     */
    readonly content?: string;
    /**
     * 发生错误的源。
     */
    readonly source?: string;
    /**
     * 初始化新的日志项。
     * @param data 要记录的日志数据。
     * @param args 格式化参数。日志信息中 `{x}` 会被替换为 `args.x` 的值。
     */
    constructor(data: string | Error | LogEntry, args?: {
        [key: string]: any;
    });
    /**
     * 获取当前日志数据的字符串形式。
     * @param colors 是否包含颜色信息。
     * @return 返回格式化后的日志。
     */
    toString(colors?: boolean): string;
}
