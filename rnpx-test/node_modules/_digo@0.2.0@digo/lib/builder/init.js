"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const np = require("path");
const url_1 = require("url");
const fs_1 = require("../utility/fs");
const logging_1 = require("./logging");
const progress_1 = require("./progress");
/**
 * 初始化新的 digofile.js。
 * @param type 要初始化的框架名。
 * @return 如果生成成功则返回 true，否则返回 false。
 */
function init(type) {
    if (!type) {
        if (fs_1.existsFile("digofile.js")) {
            logging_1.fatal("'digofile.js' exists already. Nothing done.");
            return false;
        }
        try {
            fs_1.writeFile("digofile.js", `var digo = require("digo");

exports.build = function () {
    digo.src("./src").dest("./dest");
};

exports.default = function () {
    digo.watch(exports.build);
};
`);
        }
        catch (e) {
            logging_1.fatal(e);
            return false;
        }
        logging_1.log("{brightGreen:Done!} 'digofile.js' created successfully.", {}, 2 /* info */);
        return true;
    }
    // 提取路径信息。
    const url = url_1.parse(type, false, true);
    const git = url.host ? (url.protocol || "https:") + "//" + url.host : "https://github.com";
    const branch = url.hash && url.hash.slice(1) || "master";
    const pathParts = (url.pathname || "").replace(/^\//, "").split("/");
    const path = pathParts.length <= 1 ? "/digojs/digofiles" : "/" + pathParts[0] + "/" + pathParts[1];
    const dir = pathParts.length <= 1 ? pathParts[0] : pathParts.slice(2).join("/");
    const readableUrl = git === "https://github.com" ? `${git}${path}/tree/${branch}/${dir}` : `${git}${path}#${branch} ${dir}`;
    const taskId = progress_1.begin("Downloading: {url}", { url: readableUrl });
    // 获取并创建临时文件夹。
    const tmpDir = fs_1.ensureNewPath(np.join(require("os").tmpdir(), "__digo_init")) + np.sep;
    fs_1.createDir(tmpDir);
    try {
        let result = child_process_1.spawnSync("git init", { shell: true, cwd: tmpDir });
        if (result.status !== 0) {
            fs_1.deleteDir(tmpDir);
            progress_1.end(taskId);
            logging_1.fatal("Git is not installed properly, please download {bright:url} manually: {error}", {
                url: readableUrl,
                error: result.error || result.stderr || "Unknown error"
            });
            return false;
        }
        if (dir) {
            child_process_1.spawnSync("git config core.sparseCheckout true", { shell: true, cwd: tmpDir });
            fs_1.writeFile(tmpDir + ".git/info/sparse-checkout", `/${dir}/**`);
        }
        result = child_process_1.spawnSync(`git pull ${git}${path} ${branch}`, { shell: true, cwd: tmpDir });
        if (result.status !== 0) {
            fs_1.deleteDir(tmpDir);
            progress_1.end(taskId);
            logging_1.fatal("Cannot download {bright:url}: {error}", {
                url: readableUrl,
                error: result.error || result.stderr || "Unknown error"
            });
            return false;
        }
        fs_1.deleteDir(tmpDir + ".git");
        if (!fs_1.existsDir(tmpDir + dir)) {
            fs_1.deleteDir(tmpDir);
            progress_1.end(taskId);
            logging_1.fatal("Cannot find '{dir}' from {url}#{branch}", { url: git + path, branch, dir });
            return false;
        }
        fs_1.copyDirIf(tmpDir + dir, ".");
    }
    finally {
        fs_1.deleteDir(tmpDir);
        progress_1.end(taskId);
    }
    logging_1.log("{brightGreen:Done!} Project initialized successfully.", {}, 2 /* info */);
    return true;
}
exports.init = init;
