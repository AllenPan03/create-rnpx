"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lang_1 = require("../utility/lang");
const path_1 = require("../utility/path");
const require_1 = require("../utility/require");
const async_1 = require("./async");
const file_1 = require("./file");
const logging_1 = require("./logging");
const plugin_1 = require("./plugin");
const progress_1 = require("./progress");
const server_1 = require("./server");
const watch_1 = require("./watch");
/**
 * 是否允许直接载入全局安装的模块。
 */
exports.requireGlobal = true;
/**
 * 所有支持的配置文件扩展名。
 */
exports.extensions = {
    ".ts": ["ts-node/register", "typescript-node/register", "typescript-register", "typescript-require"],
    ".coffee": ["coffee-script/register", "coffee-script"]
};
/**
 * 载入配置文件。
 * @param path 要载入的配置文件路径。
 * @param updateCwd 是否更新当前工作目录。
 * @return 返回配置文件定义的所有任务。如果载入错误则返回 undefined。
 */
function loadDigoFile(path = "digofile.js", updateCwd = true) {
    path = path_1.resolvePath(path);
    const task = progress_1.begin("Using: {digofile}", { digofile: logging_1.getDisplayName(path) });
    const result = { __proto__: null };
    try {
        if (exports.requireGlobal) {
            require_1.addRequirePath(path_1.getDir(require_1.resolveRequirePath("digo") || path_1.resolvePath(__dirname, "../..")));
        }
        if (updateCwd !== false) {
            const dir = path_1.getDir(path);
            if (process.cwd() !== dir) {
                process.chdir(dir);
            }
        }
        const ext = path_1.getExt(path);
        if (!require.extensions[ext]) {
            if (ext in exports.extensions) {
                let found = false;
                for (const name of exports.extensions[ext]) {
                    try {
                        plugin_1.plugin(name);
                        found = true;
                        break;
                    }
                    catch (e) {
                    }
                }
                if (!found) {
                    logging_1.fatal("Cannot find compiler for '{bright:digofile}'. Run 'npm install {module}' and retry.", {
                        digofile: path,
                        module: exports.extensions[ext][0]
                    });
                    return result;
                }
            }
            else {
                logging_1.fatal("Cannot find compiler for '{bright:digofile}'.", {
                    digofile: path
                });
                return result;
            }
        }
        const config = require(path);
        for (const key in config) {
            if (typeof config[key] === "function") {
                result[key] = config[key];
            }
        }
    }
    finally {
        progress_1.end(task);
    }
    return result;
}
exports.loadDigoFile = loadDigoFile;
/**
 * 是否在生成完成后报告结果。
 */
exports.report = true;
/**
 * 执行一个任务。
 * @param task 要执行的任务。
 * @param taskName 任务名。
 */
function run(task, taskName = task.name || "<anonymous task>") {
    exports.startTime = process.hrtime();
    const taskId = progress_1.begin("Executing task: {task}", { task: taskName });
    if (file_1.buildMode === 4 /* server */) {
        server_1.startServer({
            task: task
        });
    }
    else if (file_1.buildMode === 3 /* watch */) {
        watch_1.watch(task);
    }
    else {
        async_1.then(task);
    }
    async_1.then(() => {
        progress_1.end(taskId);
        if (exports.report) {
            logging_1.info(`{brightBlack:now} {${server_1.server && server_1.server.isListening ? "brightCyan:Server started at }{bright:url" :
                watch_1.watcher && watch_1.watcher.isWatching ? "brightCyan:Start watching..." :
                    file_1.buildMode === 1 /* clean */ ? "brightCyan:Clean completed!" :
                        file_1.buildMode === 2 /* preview */ ? "brightCyan:Build(Preview) completed!" :
                            file_1.fileCount === 0 ? "brightCyan:Done!" : logging_1.errorCount > 0 ? "brightRed:Build completed!" : logging_1.warningCount > 0 ? "brightYellow:Build success!" : "brightGreen:Build success!"}} (error: {${logging_1.errorCount ? "brightRed:" : ""}error}, warning: {${logging_1.warningCount ? "brightYellow:" : ""}warning}, ${file_1.fileCount > 0 ? "file: {file}, " : ""}elapsed: {elapsed}) `, {
                error: logging_1.errorCount,
                warning: logging_1.warningCount,
                file: file_1.fileCount,
                elapsed: lang_1.formatHRTime(process.hrtime(exports.startTime)),
                now: lang_1.formatDate(undefined, "[HH:mm:ss]"),
                url: server_1.server && server_1.server.url
            });
        }
    });
}
exports.run = run;
