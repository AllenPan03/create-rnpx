/// <reference types="node" />
import * as nfs from "fs";
import { FSWatcher } from "../utility/fsWatcher";
import { Pattern } from "../utility/matcher";
import { AsyncCallback } from "../utility/asyncQueue";
import { RootFileList } from "./src";
import file = require("./file");
/**
 * 表示一个监听器。
 */
export declare class Watcher extends FSWatcher {
    /**
     * 判断是否忽略指定的路径。
     * @param path 要判断的文件或文件夹绝对路径。
     * @return 如果应忽略指定的路径则返回 true，否则返回 false。
     */
    ignored(path: string): boolean;
    /**
     * 当监听到文件删除后执行。
     * @param path 相关的文件绝对路径。
     * @param lastWriteTime 最后修改时间。
     */
    protected onDelete(path: string, lastWriteTime: number): void;
    /**
     * 当监听到文件创建后执行。
     * @param path 相关的文件绝对路径。
     * @param stats 文件属性对象。
     */
    protected onCreate(path: string, stats: nfs.Stats): void;
    /**
     * 当监听到文件改变后执行。
     * @param path 相关的文件绝对路径。
     * @param stats 相关的文件属性对象。
     * @param lastWriteTime 最后修改时间。
     */
    protected onChange(path: string, stats: nfs.Stats, lastWriteTime: number): void;
    /**
     * 当监听发生错误后执行。
     * @param e 相关的错误对象。
     * @param path 相关的文件绝对路径。
     */
    protected onError(e: NodeJS.ErrnoException, path: string): void;
    /**
     * 缓存所有已更新的文件。
     */
    private changed;
    /**
     * 缓存所有已删除的文件。
     */
    private deleted;
    /**
     * 存储所有模块的依赖关系。
     */
    private deps;
    /**
     * 添加一个已更新的文件。
     * @param path 已更新的文件绝对路径。
     */
    private addChange;
    /**
     * 添加一个已删除的文件。
     * @param path 已删除的文件绝对路径。
     */
    private addDelete;
    /**
     * 重新构建发生改变的文件。
     */
    private rebuild;
    /**
     * 清理生成器的状态。
     */
    private reset;
    /**
     * 获取所有根节点列表。
     */
    readonly rootLists: RootFileList[];
    /**
     * 判断当前监听器是否已初始化。
     */
    inited: boolean;
    /**
     * 执行并开始监听指定的任务。
     * @param task 执行的任务名。
     * @param callback 开始监听的回调。
     */
    start(task: AsyncCallback, callback?: () => void): void;
    /**
     * 添加文件的依赖项。
     * @param file 相关的文件。
     * @param dep 依赖的绝对路径。
     */
    addDep(file: file.File, path: string): void;
    /**
     * 删除所有监听器。
     * @param callback 删除完成后的回调函数。
     */
    close(callback?: () => void): void;
}
export interface Watcher {
    /**
     * 绑定一个重新生成事件。
     * @param changes 所有已更新需要重新生成的文件。
     * @param deletes 所有已删除需要重新生成的文件。
     */
    on(event: "rebuild", listener: (changes: string[], deletes: string[]) => void): this;
    /**
     * 绑定一个文件删除事件。
     * @param path 相关的文件绝对路径。
     * @param lastWriteTime 最后修改时间。
     */
    on(event: "delete", listener: (path: string, lastWriteTime: number) => void): this;
    /**
     * 绑定一个文件夹删除事件。
     * @param path 相关的文件夹绝对路径。
     * @param lastEntries 最后文件列表。
     */
    on(event: "deleteDir", listener: (path: string, lastEntries: string[]) => void): this;
    /**
     * 绑定一个文件创建事件。
     * @param path 相关的文件绝对路径。
     * @param stats 文件属性对象。
     */
    on(event: "create", listener: (path: string, stats: nfs.Stats) => void): this;
    /**
     * 绑定一个文件夹删除事件。
     * @param path 相关的文件夹绝对路径。
     * @param entries 文件列表。
     */
    on(event: "createDir", listener: (path: string, entries: string[]) => void): this;
    /**
     * 绑定一个文件改变事件。
     * @param path 相关的文件绝对路径。
     * @param stats 相关的文件属性对象。
     * @param lastWriteTime 最后修改时间。
     */
    on(event: "change", listener: (path: string, stats: nfs.Stats, lastWriteTime: number) => void): this;
    /**
     * 绑定一个错误事件。
     * @param error 相关的错误对象。
     * @param path 相关的文件绝对路径。
     */
    on(event: "error", listener: (error: NodeJS.ErrnoException, path: string) => void): this;
    /**
     * 绑定一个事件。
     * @param event 要绑定的事件名。
     * @param listener 要绑定的事件监听器。
     */
    on(event: string | symbol, listener: Function): this;
}
/**
 * 是否采用轮询监听的方式。
 */
export declare var polling: any;
/**
 * 当前使用的监听器。
 */
export declare var watcher: Watcher | null;
/**
 * 监听指定的文件并执行回调。
 * @param pattern 要监听的文件匹配器。匹配器可以是通配符、正则表达式、函数或以上组合的数组。
 * @param listener 要执行的任务函数。
 */
export declare function watch(pattern: Pattern, listener: (event: "create" | "change" | "delete", path: string) => void): FSWatcher;
/**
 * 执行指定的任务并监听所有生成的文件。
 * @param task 要执行的任务函数。
 */
export declare function watch(task: AsyncCallback): Watcher;
