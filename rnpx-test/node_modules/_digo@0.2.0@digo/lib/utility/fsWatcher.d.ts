/// <reference types="node" />
import { EventEmitter } from "events";
import * as nfs from "fs";
/**
 * 表示一个文件系统监听器。
 * @example
 * var watcher = new FSWatcher();
 * watcher.on("change", function (path) { console.log("Changed", path) });
 * watcher.on("delete", function (path) { console.log("Deleted", path) });
 * watcher.on("create", function (path) { console.log("Created", path) });
 * watcher.add(".", function () { console.log("Start Watching...") });
 */
export declare class FSWatcher extends EventEmitter {
    /**
     * 判断是否忽略指定的路径。
     * @param path 要判断的文件或文件夹绝对路径。
     * @return 如果忽略指定的路径则返回 true，否则返回 false。
     */
    ignored(path: string): boolean;
    /**
     * 当监听到文件删除后执行。
     * @param path 相关的文件绝对路径。
     * @param lastWriteTime 最后修改时间。
     */
    protected onDelete(path: string, lastWriteTime: number): void;
    /**
     * 当监听到文件夹删除后执行。
     * @param path 相关的文件夹绝对路径。
     * @param lastEntries 最后文件列表。
     */
    protected onDeleteDir(path: string, lastEntries: string[]): void;
    /**
     * 当监听到文件创建后执行。
     * @param path 相关的文件绝对路径。
     * @param stats 文件属性对象。
     */
    protected onCreate(path: string, stats: nfs.Stats): void;
    /**
     * 当监听到文件夹创建后执行。
     * @param path 相关的文件夹绝对路径。
     * @param entries 文件列表。
     */
    protected onCreateDir(path: string, entries: string[]): void;
    /**
     * 当监听到文件改变后执行。
     * @param path 相关的文件绝对路径。
     * @param stats 相关的文件属性对象。
     * @param lastWriteTime 最后修改时间。
     */
    protected onChange(path: string, stats: nfs.Stats, lastWriteTime: number): void;
    /**
     * 当监听发生错误后执行。
     * @param error 相关的错误对象。
     * @param path 相关的文件绝对路径。
     */
    protected onError(error: NodeJS.ErrnoException, path: string): void;
    /**
     * 添加要监听的文件或文件夹。
     * @param path 要添加的文件或文件夹路径。
     * @param callback 开始监听的回调函数。
     */
    add(path: string, callback?: (error: NodeJS.ErrnoException | null, path: string) => void): void;
    /**
     * 删除指定路径的监听器。
     * @param path 要删除的文件或文件夹路径。
     */
    remove(path: string): void;
    /**
     * 删除所有监听器。
     * @param callback 删除完成后的回调函数。
     */
    close(callback?: () => void): void;
    /**
     * 判断当前监听器是否正在监听。
     */
    readonly isWatching: boolean;
    /**
     * 存储所有原生监听器对象。
     */
    private _watchers;
    /**
     * 创建指定路径的原生监听器。
     * @param path 要监听的文件或文件夹绝对路径。
     * @param root 标记当前监听器是否是根监听器。
     * @return 返回原生监听器。
     */
    private createNativeWatcher;
    /**
     * 获取传递给原生监听器的选项。
     */
    watchOptions: {
        /**
         * 是否持久监听。如果设为 false 则在监听到一次改动后立即退出监听。
         */
        persistent: boolean;
        /**
         * 是否使用原生的递归监听支持。
         */
        recursive: boolean;
        /**
         * 默认文件名编码。
         */
        encoding: string;
        /**
         * 轮询的间隔毫秒数。
         */
        interval: number;
    };
    /**
     * 删除原生监听器。
     * @param path 要删除监听的文件或文件夹绝对路径。
     */
    private removeNativeWatcher;
    /**
     * 处理原生监听更改事件。
     * @param event 发生事件的名称。
     * @param path 发生改变的文件或文件夹绝对路径。
     * @param force 是否强制更新所在路径本身。
     */
    private _handleWatchChange;
    /**
     * 监听延时回调的毫秒数。
     * @desc 设置一定的延时可以避免在短时间内重复处理相同的文件。
     */
    delay: number;
    /**
     * 是否采用轮询的方案。
     */
    usePolling: boolean | null;
    /**
     * 存储所有已挂起的发生改变的路径。
     */
    private _pendingChanges;
    /**
     * 存储等待解析已挂起的更改的计时器。
     */
    private _resolveChangesTimer;
    /**
     * 解析所有已挂起的更改文件。
     * @param watcher 目标监听器。
     */
    private static _resolveChanges;
    /**
     * 存储所有状态对象。
     * @desc
     * 对象的键是绝对路径。
     * 如果路径是一个文件夹，则值为所有直接子文件和子文件夹的名称数组。
     * 如果路径是一个文件，则值为文件的最后修改时间。
     */
    private _stats;
    /**
     * 初始化指定文件或文件夹及子文件的状态对象。
     * @param path 要初始化的文件或文件夹绝对路径。
     * @param callback 初始化完成的回调函数。
     * @param stats 当前路径的属性对象。提供此参数可避免重新查询。
     */
    private _initStats;
    /**
     * 初始化指定文件夹及子文件的状态对象。
     * @param path 要初始化的文件夹绝对路径。
     * @param callback 初始化完成的回调函数。
     * @param entries 当前路文件夹的项。
     */
    private _initDirStats;
    /**
     * 正在执行的异步任务数。
     */
    private _pending;
    /**
     * 更新指定文件的状态对象。
     * @param path 要更新的文件绝对路径。
     */
    private _updateFileStats;
    /**
     * 更新指定文件夹的状态对象。
     * @param path 要更新的文件夹绝对路径。
     */
    private _updateDirStats;
    /**
     * 删除指定文件或文件夹及子文件的状态对象。
     * @param path 要删除的文件或文件夹绝对路径。
     */
    private _removeStats;
}
export interface FSWatcher {
    /**
     * 绑定一个文件删除事件。
     * @param event 要绑定的事件名。
     * @param listener 要绑定的事件监听器。
     * * @param path 相关的文件绝对路径。
     * * @param lastWriteTime 最后修改时间。
     */
    on(event: "delete", listener: (path: string, lastWriteTime: number) => void): this;
    /**
     * 绑定一个文件夹删除事件。
     * @param event 要绑定的事件名。
     * @param listener 要绑定的事件监听器。
     * * @param path 相关的文件夹绝对路径。
     * * @param lastEntries 最后文件列表。
     */
    on(event: "deleteDir", listener: (path: string, lastEntries: string[]) => void): this;
    /**
     * 绑定一个文件创建事件。
     * @param event 要绑定的事件名。
     * @param listener 要绑定的事件监听器。
     * * @param path 相关的文件绝对路径。
     * * @param stats 文件属性对象。
     */
    on(event: "create", listener: (path: string, stats: nfs.Stats) => void): this;
    /**
     * 绑定一个文件夹删除事件。
     * @param event 要绑定的事件名。
     * @param listener 要绑定的事件监听器。
     * * @param path 相关的文件夹绝对路径。
     * * @param entries 文件列表。
     */
    on(event: "createDir", listener: (path: string, entries: string[]) => void): this;
    /**
     * 绑定一个文件改变事件。
     * @param event 要绑定的事件名。
     * @param listener 要绑定的事件监听器。
     * * @param path 相关的文件绝对路径。
     * * @param stats 相关的文件属性对象。
     * * @param lastWriteTime 最后修改时间。
     */
    on(event: "change", listener: (path: string, stats: nfs.Stats, lastWriteTime: number) => void): this;
    /**
     * 绑定一个错误事件。
     * @param event 要绑定的事件名。
     * @param listener 要绑定的事件监听器。
     * * @param error 相关的错误对象。
     * * @param path 相关的文件绝对路径。
     */
    on(event: "error", listener: (error: NodeJS.ErrnoException, path: string) => void): this;
    /**
     * 绑定一个事件。
     * @param event 要绑定的事件名。
     * @param listener 要绑定的事件监听器。
     */
    on(event: string | symbol, listener: Function): this;
}
export default FSWatcher;
