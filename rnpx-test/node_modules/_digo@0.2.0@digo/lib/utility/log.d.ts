/**
 * 表示控制台颜色。
 * @see https://en.wikipedia.org/wiki/ANSI_escape_code
 */
export declare const enum ConsoleColor {
    /**
     * 黑色。
     */
    black = 30,
    /**
     * 红色。
     */
    red = 31,
    /**
     * 绿色。
     */
    green = 32,
    /**
     * 黄色。
     */
    yellow = 33,
    /**
     * 蓝色。
     */
    blue = 34,
    /**
     * 紫色。
     */
    magenta = 35,
    /**
     * 靛色。
     */
    cyan = 36,
    /**
     * 白色。
     */
    white = 37,
    /**
     * 亮色。
     */
    bright = 1,
    /**
     * 黑色。
     */
    brightBlack = 90,
    /**
     * 亮红色。
     */
    brightRed = 91,
    /**
     * 亮绿色。
     */
    brightGreen = 92,
    /**
     * 亮黄色。
     */
    brightYellow = 93,
    /**
     * 亮蓝色。
     */
    brightBlue = 94,
    /**
     * 亮紫色。
     */
    brightMagenta = 95,
    /**
     * 亮靛色。
     */
    brightCyan = 96,
    /**
     * 亮白色。
     */
    brightWhite = 97
}
/**
 * 为日志字符串添加颜色控制字符。
 * @param value 要处理的字符串。
 * @param color 要添加的颜色。
 * @return 返回已处理的字符串。
 */
export declare function addLogColor(value: string, color: ConsoleColor): string;
/**
 * 删除日志字符串中的所有控制字符。
 * @param value 要处理的字符串。
 * @return 返回已处理的字符串。
 */
export declare function removeLogColor(value: string): string;
/**
 * 格式化指定的日志字符串。
 * @param value 要格式化的字符串。其中 `{x}` 会被替换为 `args.x` 的值；`{red:x}` 会被替换带颜色控制字符的值。其中可使用的颜色见 `ConsoleColor` 枚举。
 * @param args 格式化的参数。
 * @return 返回已处理的字符串。
 * @example formatLog("Hello, {bright:name}", {name: "xld"}) // "Hello, \x1b[1mxld\x1b[39m"
 * @example formatLog("Hello, {red:name}", {name: "xld"}) // "Hello, \x1b[31mxld\x1b[39m"
 * @example formatLog("{Error}: {bright:message}", {message: "foo..."}) // "\x1b[31mError\x1b[39m: \x1b[1mfoo...\x1b[39m"
 */
export declare function formatLog(value: string, args?: {
    [key: string]: any;
}): string;
/**
 * 如果指定的日志字符串实际显示宽度超过最大值，则将超出部分替换为 `...`。
 * @param value 要处理的字符串。
 * @param width 允许的最大宽度。如果值小于等于 0 则表示和实际控制台宽度的差。
 * @return 返回已处理的字符串。
 */
export declare function ellipsisLog(value: string, width?: number): string;
/**
 * 将指定的日志字符串按最大宽度拆成多行。
 * @param value 要处理的字符串。
 * @param width 允许的最大宽度。如果值小于等于 0 则表示和实际控制台宽度的差。
 * @return 返回包含每行内容的数组。
 */
export declare function splitLog(value: string, width?: number): string[];
/**
 * 格式化指定的源码内容。
 * @param source 要处理的源码内容。
 * @param width 允许的最大宽度。如果值小于等于 0 则表示和实际控制台宽度的差。
 * @param height 允许的最大行数。如果值等于 0 则显示所有行。
 * @param showLine 是否显示行号。
 * @param showColumn 是否显示列信息。
 * @param line 开始行号(从 0 开始)。
 * @param column 开始列号(从 0 开始)。
 * @param endLine 结束行号(从 0 开始)。
 * @param endColumn 结束列号(从 0 开始)。
 * @return 返回源码内容。
 */
export declare function formatSource(source: string, width?: number, height?: number, showLine?: boolean, showColumn?: boolean, line?: number, column?: number, endLine?: number, endColumn?: number): string;
