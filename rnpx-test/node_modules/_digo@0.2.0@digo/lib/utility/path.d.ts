/**
 * 解析指定路径对应的绝对路径。
 * @param path 要解析的路径。
 * @return 返回已解析的绝对路径。路径末尾多余的分隔符会被删除。
 * @example resolvePath("../relative")
 */
export declare function resolvePath(path: string): string;
/**
 * 解析指定路径对应的绝对路径。
 * @param base 要解析的基路径。
 * @param path 要解析的路径。
 * @return 返回已解析的绝对路径。路径末尾多余的分隔符会被删除。
 * @example resolvePath("foo/goo/hoo", "../relative")
 */
export declare function resolvePath(base: string, path: string): string;
/**
 * 解析指定路径对应的相对路径。
 * @param path 要解析的路径。
 * @return 返回已解析的相对路径。路径固定以 `/` 作为分隔符。路径末尾多余的分隔符会被删除。
 * @example relativePath("foo/goo/hoo")
 */
export declare function relativePath(path: string): string;
/**
 * 解析指定路径对应的相对路径。
 * @param base 要解析的基路径。
 * @param path 要解析的路径。
 * @return 返回已解析的相对路径。路径固定以 `/` 作为分隔符。路径末尾多余的分隔符会被删除。
 * @example relativePath("foo/goo/hoo", "foo/goo/relative") // "../relative"
 */
export declare function relativePath(base: string, path?: string): string;
/**
 * 规范化指定的路径格式，删除路径中多余的 `./` 和 `../`。
 * @param path 要处理的路径。
 * @return 返回已处理的路径。路径固定以 `/` 作为分隔符。路径末尾的分隔符会被保留。
 * @example normalizePath("foo/") // "foo/"
 * @example normalizePath("./foo.js") // "foo.js"
 */
export declare function normalizePath(path: string): string;
/**
 * 判断指定的路径是否是绝对路径。
 * @param path 要判断的路径。
 * @return 如果是绝对路径则返回 true，否则返回 false。
 * @example isAbsolutePath("foo") // false
 */
export declare function isAbsolutePath(path: string): boolean;
/**
 * 获取指定路径的文件夹部分。
 * @param path 要处理的路径。
 * @return 返回文件夹路径。
 * @example getDir("/root/foo.txt") // "/root/"
 */
export declare function getDir(path: string): string;
/**
 * 设置指定路径的文件夹部分。
 * @param path 要处理的路径。
 * @param value 要设置的新文件夹路径。
 * @return 返回已处理的路径。
 * @example setDir("/root/foo.txt", "goo") // "goo/foo.txt"
 */
export declare function setDir(path: string, value: string): string;
/**
 * 获取指定路径的文件名部分。
 * @param path 要处理的路径。
 * @param ext 如果为 true 则包含扩展名，否则不包含扩展名(包括点)。
 * @return 返回文件名路径。
 * @example getFileName("/root/foo.txt") // "foo.txt"
 */
export declare function getFileName(path: string, ext?: boolean): string;
/**
 * 设置指定路径的文件名部分。
 * @param path 要处理的路径。
 * @param value 要更改的新文件名。
 * @param ext 如果为 true 则同时更改扩展名，否则保留原扩展名(包括点)。
 * @return 返回已处理的路径。如果源路径不含扩展名则自动追加到文件名末尾。
 * @example setFileName("/root/foo.txt", "goo.jpg") // "/root/goo.jpg"
 * @example setFileName("/root/foo.txt", "goo", false) // "/root/goo.jpg"
 */
export declare function setFileName(path: string, value: string, ext?: boolean): string;
/**
 * 在指定路径的文件名前追加内容。
 * @param path 要处理的路径。
 * @param value 要追加的内容。
 * @return 返回已处理的路径。
 * @example prependFileName("foo/goo.txt", "fix_") // "foo/fix_goo.txt"
 */
export declare function prependFileName(path: string, value: string): string;
/**
 * 在指定路径的文件名后追加内容。
 * @param path 要处理的路径。
 * @param value 要追加的内容。
 * @return 返回已处理的路径。
 * @example appendFileName("foo/goo.txt", "_fix") // "foo/goo_fix.txt"
 */
export declare function appendFileName(path: string, value: string): string;
/**
 * 获取指定路径的扩展名(包括点)部分。
 * @param path 要处理的地址。
 * @return 返回扩展名(包括点)。如果文件名以点前缀，则返回空。
 * @example getExt("/root/foo.txt") // ".txt"
 */
export declare function getExt(path: string): string;
/**
 * 设置指定路径的扩展名(包括点)部分。
 * @param path 要处理的路径。
 * @param value 要更改的新扩展名(包括点)。
 * @return 返回已处理的路径。如果源路径不含扩展名则自动追加。
 * @example setExt("/root/foo.txt", ".jpg") // "/root/foo.jpg"
 * @example setExt("/root/foo", ".jpg") // "/root/foo.jpg"
 * @example setExt("/root/foo.txt", "") // "/root/foo"
 */
export declare function setExt(path: string, value: string): string;
/**
 * 判断两个路径是否相同。
 * @param path1 要判断的第一个路径。
 * @param path2 要判断的第二个路径。
 * @return 如果相同则返回 true，否则返回 false。
 * @example pathEquals("/root", "/root") // true
 */
export declare function pathEquals(path1: string | null, path2: string | null): boolean;
/**
 * 判断一个文件夹是否包含指定的路径。
 * @param parent 要判断的文件夹路径。
 * @param child 要判断的子文件或文件夹路径。
 * @return 如果 *parent* 包含 *child* 则返回 true，否则返回 false。
 * @example inDir("/root", "/root/foo") // true
 * @example inDir("/root/foo", "/root/goo") // false
 */
export declare function inDir(parent: string, child: string): boolean;
/**
 * 获取两个路径中的公共文件夹。
 * @param path1 要处理的第一个路径。
 * @param path2 要处理的第二个路径。
 * @return 返回公共文件夹绝对路径。如果没有相同部分则返回 null。
 * @example commonDir("/root/foo", "/root/foo/goo") // "/root/foo"
 */
export declare function commonDir(path1: string | null, path2: string | null): string;
