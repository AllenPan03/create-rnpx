/// <reference types="node" />
import * as nfs from "fs";
/**
 * 表示文件或文件夹的属性对象。
 */
export declare type Stats = nfs.Stats;
/**
 * 获取文件或文件夹的属性，如果是链接则返回链接实际引用的文件属性。
 * @param path 要获取的路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件属性对象。如果 *callback* 是函数则不返回。
 */
export declare function getStat(path: string, callback?: undefined, retry?: number): Stats;
/**
 * 获取文件或文件夹的属性，如果是链接则返回链接实际引用的文件属性。
 * @param path 要获取的路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件属性对象。如果 *callback* 是函数则不返回。
 */
export declare function getStat(path: string, callback: (error: NodeJS.ErrnoException | null, stats: Stats) => void, retry?: number): void;
/**
 * 获取文件或文件夹的属性，如果是链接则返回链接本身的属性。
 * @param path 要获取的路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件属性对象。如果 *callback* 是函数则不返回。
 */
export declare function getStatLink(path: string, callback?: undefined, retry?: number): Stats;
/**
 * 获取文件或文件夹的属性，如果是链接则返回链接本身的属性。
 * @param path 要获取的路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件属性对象。如果 *callback* 是函数则不返回。
 */
export declare function getStatLink(path: string, callback: (error: NodeJS.ErrnoException | null, stats: Stats) => void, retry?: number): void;
/**
 * 判断指定的文件夹是否已存在。
 * @param path 要判断的路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 如果指定的路径是文件夹则返回 true，否则返回 false。如果 *callback* 是函数则不返回。
 */
export declare function existsDir(path: string, callback?: undefined, retry?: number): boolean;
/**
 * 判断指定的文件夹是否已存在。
 * @param path 要判断的路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 如果指定的路径是文件夹则返回 true，否则返回 false。如果 *callback* 是函数则不返回。
 */
export declare function existsDir(path: string, callback: (result: boolean) => void, retry?: number): void;
/**
 * 判断指定的文件是否已存在。
 * @param path 要判断的路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 如果指定的路径是文件则返回 true，否则返回 false。如果 *callback* 是函数则不返回。
 */
export declare function existsFile(path: string, callback?: undefined, retry?: number): boolean;
/**
 * 判断指定的文件是否已存在。
 * @param path 要判断的路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 如果指定的路径是文件则返回 true，否则返回 false。如果 *callback* 是函数则不返回。
 */
export declare function existsFile(path: string, callback: (result: boolean) => void, retry?: number): void;
/**
 * 如果指定的路径已存在则执行重命名。
 * @param path 要测试的文件或文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 重试的次数。
 * @return 返回确认不存在的路径。如果 *callback* 是函数则不返回。
 */
export declare function ensureNewPath(path: string, callback?: undefined, startId?: number): string;
/**
 * 如果指定的路径已存在则执行重命名。
 * @param path 要测试的文件或文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 重试的次数。
 * @return 返回确认不存在的路径。如果 *callback* 是函数则不返回。
 */
export declare function ensureNewPath(path: string, callback?: (result: string) => void, startId?: number): void;
/**
 * 创建一个文件夹。
 * @param path 要创建的文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function createDir(path: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 确保已创建指定路径所在的文件夹。
 * @param path 要处理的路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function ensureParentDir(path: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 删除指定的文件夹。
 * @param path 要删除的文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function deleteDir(path: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 清空指定的文件夹。
 * @param path 要清空的文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function cleanDir(path: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 如果父文件夹是空文件夹则删除。
 * @param path 文件夹内的文件路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function deleteParentDirIfEmpty(path: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 删除指定的文件，如果文件不存在则直接返回。
 * @param path 要删除的文件路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function deleteFile(path: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 读取文件夹内的所有项。
 * @param path 要读取的文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件夹内所有项。如果文件夹不存在则返回空数组。如果 *callback* 是函数则不返回。
 */
export declare function readDir(path: string, callback?: undefined, retry?: number): string[];
/**
 * 读取文件夹内的所有项。
 * @param path 要读取的文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件夹内所有项。如果文件夹不存在则返回空数组。如果 *callback* 是函数则不返回。
 */
export declare function readDir(path: string, callback: (error: NodeJS.ErrnoException | null, entries: string[]) => void, retry?: number): void;
/**
 * 读取文件夹内的所有项，如果文件夹不存在则返回空列表。
 * @param path 要读取的文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件夹内所有项。如果文件夹不存在则返回空数组。如果 *callback* 是函数则不返回。
 */
export declare function readDirIf(path: string, callback?: undefined, retry?: number): string[];
/**
 * 读取文件夹内的所有项，如果文件夹不存在则返回空列表。
 * @param path 要读取的文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件夹内所有项。如果文件夹不存在则返回空数组。如果 *callback* 是函数则不返回。
 */
export declare function readDirIf(path: string, callback: (error: NodeJS.ErrnoException | null, entries: string[]) => void, retry?: number): void;
/**
 * 深度遍历指定的文件或文件夹并执行回调。
 * @param path 要遍历的文件或文件夹路径。
 * @param options 遍历的选项。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function walk(path: string, options: WalkOptions, retry?: number): void;
/**
 * 表示遍历的选项。
 */
export interface WalkOptions {
    /**
     * 是否解析链接。
     */
    follow?: boolean;
    /**
     * 所有文件属性的缓存对象。
     */
    stats?: {
        [path: string]: Stats | ((path: string, error: NodeJS.ErrnoException | null, stats: nfs.Stats) => void)[];
    };
    /**
     * 所有文件列表的缓存对象。
     */
    entries?: {
        [path: string]: string[] | ((path: string, error: NodeJS.ErrnoException | null, stats: nfs.Stats, entries: string[]) => void)[];
    };
    /**
     * 在遍历文件夹前的回调函数。
     * @param path 当前文件的绝对路径。
     * @param stats 当前文件的属性对象。
     * @param entries 当前文件夹下的所有项。
     * @return 如果函数返回 false 表示不继续遍历此文件夹。
     */
    walk?(path: string, stats: nfs.Stats, entries?: string[]): boolean | void;
    /**
     * 处理一个文件的回调函数。
     * @param path 当前文件的绝对路径。
     * @param stats 当前文件的属性对象。
     */
    file?(path: string, stats: nfs.Stats): void;
    /**
     * 处理一个文件夹的回调函数。
     * @param path 当前文件夹的绝对路径。
     * @param stats 当前文件夹的属性对象。
     * @return 如果函数返回 false 表示不继续遍历此文件夹。
     */
    dir?(path: string, stats: nfs.Stats): boolean | void;
    /**
     * 处理一个其它类型文件的回调函数。
     * @param path 当前文件的绝对路径。
     * @param stats 当前文件的属性对象。
     */
    other?(path: string, stats: nfs.Stats): void;
    /**
     * 处理错误的回调函数。
     * @param error 出现的错误对象。
     */
    error?(error: NodeJS.ErrnoException): void;
    /**
     * 遍历结束的回调函数。
     */
    end?(data?: any): void;
}
/**
 * 读取指定的文件内容。
 * @param path 要读取的文件路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件二进制内容。如果 *callback* 是函数则不返回。
 */
export declare function readFile(path: string, callback?: undefined, retry?: number): Buffer;
/**
 * 读取指定的文件内容。
 * @param path 要读取的文件路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件二进制内容。如果 *callback* 是函数则不返回。
 */
export declare function readFile(path: string, callback: (error: NodeJS.ErrnoException | null, buffer: Buffer) => void, retry?: number): void;
/**
 * 读取指定的文件内容，如果文件不存在则返回空数据。
 * @param path 要读取的文件路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件二进制内容。如果 *callback* 是函数则不返回。
 */
export declare function readFileIf(path: string, callback?: undefined, retry?: number): Buffer;
/**
 * 读取指定的文件内容，如果文件不存在则返回空数据。
 * @param path 要读取的文件路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回文件二进制内容。如果 *callback* 是函数则不返回。
 */
export declare function readFileIf(path: string, callback: (error: NodeJS.ErrnoException | null, buffer: Buffer) => void, retry?: number): void;
/**
 * 写入指定的文件内容。
 * @param path 要写入的文件路径。
 * @param data 要写入的文件数据。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function writeFile(path: string, data: string | Buffer, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 写入指定的文件内容，如果文件已存在则不写入。
 * @param path 要写入的文件路径。
 * @param data 要写入的文件数据。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function writeFileIf(path: string, data: string | Buffer, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 在指定文件末尾追加内容。
 * @param path 要创建的文件路径。
 * @param data 要写入的文件数据。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function appendFile(path: string, data: string | Buffer, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 创建一个链接。
 * @param path 要创建的文件路径。
 * @param target 要链接的目标路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function createLink(path: string, target: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 创建一个链接，如果文件已存在则不写入。
 * @param path 要创建的文件路径。
 * @param target 要链接的目标路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function createLinkIf(path: string, target: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 读取链接的实际地址。
 * @param path 要读取的链接路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回路径。如果 *callback* 是函数则不返回。
 */
export declare function readLink(path: string, callback?: undefined, retry?: number): string;
/**
 * 读取链接的实际地址。
 * @param path 要读取的链接路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回路径。如果 *callback* 是函数则不返回。
 */
export declare function readLink(path: string, callback?: (error: NodeJS.ErrnoException | null, link: string) => void, retry?: number): void;
/**
 * 读取链接的实际地址，如果文件不存在则返回空数据。
 * @param path 要读取的链接路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回路径。如果 *callback* 是函数则不返回。
 */
export declare function readLinkIf(path: string, callback?: undefined, errorIfNotFound?: boolean, retry?: number): string;
/**
 * 读取链接的实际地址，如果文件不存在则返回空数据。
 * @param path 要读取的链接路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回路径。如果 *callback* 是函数则不返回。
 */
export declare function readLinkIf(path: string, callback?: (error: NodeJS.ErrnoException | null, link: string) => void, errorIfNotFound?: boolean, retry?: number): void;
/**
 * 复制指定的文件夹。
 * @param from 复制的源文件夹路径。
 * @param to 复制的目标文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function copyDir(from: string, to: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 复制指定的文件夹，如果文件已存在则不复制。
 * @param from 复制的源文件夹路径。
 * @param to 复制的目标文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function copyDirIf(from: string, to: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 复制指定的文件。
 * @param from 复制的源文件路径。
 * @param to 复制的目标文件路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function copyFile(from: string, to: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 复制指定的文件，如果文件已存在则不复制。
 * @param from 复制的源文件路径。
 * @param to 复制的目标文件路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function copyFileIf(from: string, to: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 复制指定的链接。
 * @param from 复制的源链接。
 * @param to 复制的目标链接。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function copyLink(from: string, to: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 复制指定的链接，如果文件已存在则不复制。
 * @param from 复制的源链接。
 * @param to 复制的目标链接。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function copyLinkIf(from: string, to: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 移动指定的文件夹。
 * @param from 移动的源文件夹路径。
 * @param to 移动的目标文件夹路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function moveDir(from: string, to: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 移动指定的文件。
 * @param from 移动的源文件路径。
 * @param to 移动的目标文件路径。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param retry 操作失败后自动重试的次数。
 */
export declare function moveFile(from: string, to: string, callback?: (error: NodeJS.ErrnoException | null) => void, retry?: number): void;
/**
 * 计算指定文件的校验码。
 * @param path 要计算的文件路径。
 * @param comparion 文件比较算法。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param stats 提供文件的状态数据可以避免二次查询。
 * @param buffer 提供文件的内容可以避免二次查询。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回校验码字符串。如果 *callback* 是函数则不返回。
 */
export declare function getChecksum(path: string, comparion?: FileComparion, callback?: undefined, stats?: nfs.Stats, buffer?: Buffer, retry?: number): string;
/**
 * 计算指定文件的校验码。
 * @param path 要计算的文件路径。
 * @param comparion 文件比较算法。
 * @param callback 异步操作完成后的回调函数。如果不是函数则以同步的方式执行。
 * @param stats 提供文件的状态数据可以避免二次查询。
 * @param buffer 提供文件的内容可以避免二次查询。
 * @param retry 操作失败后自动重试的次数。
 * @return 返回校验码字符串。如果 *callback* 是函数则不返回。
 */
export declare function getChecksum(path: string, comparion: FileComparion, callback: (error: NodeJS.ErrnoException | null, result: string) => void, stats?: nfs.Stats, buffer?: Buffer, retry?: number): void;
/**
 * 表示文件比较的算法。
 */
export declare const enum FileComparion {
    /**
     * 比较文件创建时间。
     */
    createTime = 1,
    /**
     * 比较最后访问时间。
     */
    lastAccessTime = 2,
    /**
     * 比较最后修改时间。
     */
    lastWriteTime = 4,
    /**
     * 比较最后修改时间。
     */
    lastChangeTime = 8,
    /**
     * 比较文件大小。
     */
    size = 16,
    /**
     * 比较 SHA1 值。
     */
    sha1 = 1024,
    /**
     * 比较 MD5 值。
     */
    md5 = 2048,
    /**
     * 比较文件数据。
     */
    data = 4096,
    /**
     * 默认比较算法。
     */
    default = 21
}
