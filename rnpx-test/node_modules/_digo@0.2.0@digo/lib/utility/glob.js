"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs_1 = require("./fs");
const matcher_1 = require("./matcher");
function glob(pattern, options = {}) {
    const matcher = pattern instanceof matcher_1.Matcher ? pattern : new matcher_1.Matcher(pattern, options.cwd);
    const processed = { __proto__: null };
    let pending = 0;
    for (const compiledPattern of (matcher.patterns.length ? matcher.patterns : [{
            base: path.resolve(options.cwd || "."),
            test(path) { return true; }
        }])) {
        pending++;
        fs_1.walk(compiledPattern.base, {
            stats: options.stats,
            entries: options.entries,
            error: options.error,
            walk: options.walk,
            dir(path, stats) {
                // 检查是否被当前匹配器忽略。
                if (matcher.ignoreMatcher && matcher.ignoreMatcher.test(path)) {
                    options.ignored && options.ignored(path, stats, false);
                    return false;
                }
                // 检查是否被全局匹配器忽略。
                if (options.globalMatcher && options.globalMatcher.ignoreMatcher && options.globalMatcher.ignoreMatcher.test(path)) {
                    options.ignored && options.ignored(path, stats, true);
                    return false;
                }
                // 自定义处理器。
                if (options.dir && options.dir(path, stats) === false) {
                    return false;
                }
            },
            file(path, stats) {
                // 不重复处理相同的文件；检查是否被当前模式匹配。
                if (path in processed || !compiledPattern.test(path)) {
                    return;
                }
                // 检查是否被当前匹配器忽略。
                if (matcher.ignoreMatcher && matcher.ignoreMatcher.test(path)) {
                    return options.ignored && options.ignored(path, stats, false);
                }
                processed[path] = true;
                // 检查是否被全局匹配器忽略。
                if (options.globalMatcher && !options.globalMatcher.test(path)) {
                    return options.ignored && options.ignored(path, stats, true);
                }
                // 通知用户已匹配文件。
                options.file && options.file(path, stats);
            },
            end: options.end ? () => {
                if (--pending < 1) {
                    if (options.end.length > 0) {
                        options.end(Object.keys(processed));
                    }
                    else {
                        options.end();
                    }
                }
            } : undefined
        });
    }
    if (!options.end) {
        return Object.keys(processed);
    }
}
exports.glob = glob;
exports.default = glob;
